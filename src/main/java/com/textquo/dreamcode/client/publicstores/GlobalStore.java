/**
 *
 * Copyright (c) 2014 Kerby Martino and others. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *     __                                         __
 * .--|  .----.-----.---.-.--------.----.-----.--|  .-----.
 * |  _  |   _|  -__|  _  |        |  __|  _  |  _  |  -__|
 * |_____|__| |_____|___._|__|__|__|____|_____|_____|_____|
 *
 */
package com.textquo.dreamcode.client.publicstores;

import com.google.gwt.core.client.GWT;
import com.textquo.dreamcode.client.DreamcodeCallback;
import com.textquo.dreamcode.client.Routes;
import com.textquo.dreamcode.client.utils.JsonHelper;
import com.textquo.dreamcode.shared.entities.DreamObject;
import org.restlet.client.Request;
import org.restlet.client.Response;
import org.restlet.client.Uniform;
import org.restlet.client.data.MediaType;
import org.restlet.client.resource.ClientResource;
import org.restlet.client.resource.Result;

import java.io.IOException;
import java.util.Map;

public class GlobalStore {
    /**
     * Add new object.
     * Server stores object with id generated by a sharded counter (if not given)
     *
     * @param callback
     */
    public void add(String type, String id, String jsonObject, final DreamcodeCallback callback){
        final ClientResource resource = new ClientResource(Routes.DREAMCODE_API + Routes.PUBLIC_STORE_API);
        resource.setOnResponse(new Uniform() {
            public void handle(Request request, Response response) {
                try {
                    String jsonResponse = response.getEntity().getText();
                    callback.success(jsonResponse);
                } catch (Exception e){
                    callback.failure(new Throwable(e.getMessage()));
                }
            }
        });
        resource.getReference().addQueryParameter("type", type);
        resource.getReference().addQueryParameter("id",id);
        resource.post(jsonObject, MediaType.APPLICATION_JSON);
    }

    public void find(String type, String id, final DreamcodeCallback callback){
        final ClientResource resource = new ClientResource(Routes.DREAMCODE_API + Routes.PUBLIC_STORE_API);
        resource.setOnResponse(new Uniform() {
            public void handle(Request request, Response response) {
                try {
                    String jsonResponse = response.getEntity().getText();
                    callback.success(jsonResponse);
                } catch (Exception e) {
                    e.printStackTrace();
                    callback.failure(new Throwable(e.getMessage()));
                }
            }
        });
        resource.getReference().addQueryParameter("type", type);
        resource.getReference().addQueryParameter("id",id);
        resource.get(MediaType.APPLICATION_JSON);
    }

    public void findAll(String type, final DreamcodeCallback callback){
        final ClientResource resource = new ClientResource(Routes.DREAMCODE_API + Routes.PUBLIC_STORES_API);
        resource.setOnResponse(new Uniform() {
            public void handle(Request request, Response response) {
                try {
                    String jsonResponse = response.getEntity().getText();
                    callback.success(jsonResponse);
                } catch (Exception e) {
                    e.printStackTrace();
                    callback.failure(new Throwable(e.getMessage()));
                }
            }
        });
        resource.getReference().addQueryParameter("type", type);
        resource.get(MediaType.APPLICATION_JSON);
    }

    /**
     * Update existing object
     */
    public void update(){

    }
}
